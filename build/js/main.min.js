"use strict";function deleteToDo(){var e=!0,t=!1,n=void 0;try{for(var r,c=deleteItems[Symbol.iterator]();!(e=(r=c.next()).done);e=!0)!function(){var e=r.value;e.addEventListener("click",function(t){e.parentElement.remove(),t.stopPropagation()})}()}catch(e){t=!0,n=e}finally{try{!e&&c.return&&c.return()}finally{if(t)throw n}}}function checkToDo(){var e=!0,t=!1,n=void 0;try{for(var r,c=checkItems[Symbol.iterator]();!(e=(r=c.next()).done);e=!0)!function(){var e=r.value;e.addEventListener("click",function(t){e.parentElement.classList.toggle("lineThroughItem"),t.stopPropagation()})}()}catch(e){t=!0,n=e}finally{try{!e&&c.return&&c.return()}finally{if(t)throw n}}}var input=document.querySelector("input[type = 'text']"),ul=document.querySelector("ul"),deleteItems=document.getElementsByClassName("deleteItem"),checkItems=document.getElementsByClassName("checkItem");input.addEventListener("keypress",function(e){if(13===e.which)if(""===this.value);else{var t=document.createElement("li");t.setAttribute("draggable","true");var n=document.createElement("img");n.className="checkItem",n.src="./images/check.svg";var r=document.createElement("img");r.className="deleteItem",r.src="./images/delete.svg";var c=this.value;this.value="",console.log(c),ul.appendChild(t).append(c,n,r),console.log(checkItems),checkToDo(),deleteToDo()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
